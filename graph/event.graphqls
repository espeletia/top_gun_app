enum EventRoles{
  REFEREE
  ADMIN
  ATHELETE
}

enum EventWeapon {
  EPEE
  FOIL
  SABRE
}

enum EventGenderMix{
  MIXED
  MEN
  WOMEN
}


enum EventType {
  INDIVIDUAL
  TEAM
}

enum EventAgeCategory{
  U9
  U10
  U11
  U12
  U13
  U14
  U15
  CADET16
  CADET17
  U18
  JUNIOR
  U23
  SENIOR
  SENIOR13PLUS
  VETERAN40PLUS
  VETERAN50
  VETERAN60
  VETERAN70
}

enum AthleteStatus {
  FINISHED
  COMPETING
}

type Event{
  Id: ID!
  Name: String!
  Description: String
  Tournament: Tournament! @goField(forceResolver: true, name: "Tournament")
  TournamentId: ID!
  RefereeIds: [ID!]! 
  Referees: [User!]! @goField(forceResolver: true, name: "Referees")
  AthleteIds: [ID!]!
  Athletes: [Athlete!]! @goField(forceResolver: true, name: "Athletes")
  start: Int!
  Pooles: [Poole!]! @goField(forceResolver: true, name: "Pooles")
  Tableaus: [Tableau!]! @goField(forceResolver: true, name: "Tableaus")
  end: Int!
  Status: TournamentStatus!
  Details: EventDetails!
}

type Athlete {
  userId: ID!
  User: User! @goField(forceResolver: true, name: "user")
  PooleSeeding: Int!
  TableauSeeding: Int
  FinalRanking: Int
}

type EventDetails {
  Weapon: EventWeapon!
  Type: EventType!
  Gender: EventGenderMix!
  Category: EventAgeCategory!
}

input CreateEventInput{
  Name: String!
  Description: String
  TournamentId: ID!
  RefereeIds: [ID!]! 
  AthleteIds: [AthleteSeedingInput!]!
  start: Int!
  end: Int!
  Details: DetailsInput!
}

input AthleteSeedingInput{
  UserId: ID!
  Seed: Int!
}

input DetailsInput{
  Weapon: Weapon!
  Type: EventType!
  Gender: Gender!
  Category: AgeCategory!
}

extend type Query {
  GetEvent(EventId: ID!): Event!
}

extend type Mutation {
  CreateEvent(TournamentId: ID!, input: CreateEventInput!): Event!
}